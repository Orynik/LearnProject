//Form.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content= value = ""h=device value = ""h, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        form,.textboxes{
            display: flex;
        }
        form{
            flex-direction: column;
        }
        .radio{
            display: flex;
            flex-direction: column;
        }
    </style>
</head>
<body>
    <form action = "src/result.php" method = "POST">
        <fieldset class = "textboxes">
            <legend>Калькулятор</legend>
            <label>Ввведите число A:<br>
                <input name = "a" type = "number" value = "0" pattern="0-9" required step = "0.1">
            </label>
            <label>Введите число Б:<br>
                <input name = "b" type = "number" value = "0" pattern="0-9" required step = "0.1">
            </label>
        </fieldset>
        <fieldset class = "radio">
            <legend>Выберите знак:</legend>
            <label>
                <input type="radio" name="Symphol" value = "+" checked>+
            </label>
            <label> 
                <input type="radio" name="Symphol" value = "-">-
            </label>
            <label> 
                <input type="radio" name="Symphol" value = "*">*
            </label>
            <label> 
                <input type="radio" name="Symphol" value = "/">/
            </label>
            <label> 
                <input type="radio" name="Symphol" value = "^">N<sup>2</sup>
            </label>
        </fieldset>
        <input type ="submit">
    </form>
</body>
</html>

//Calc.php
<?php
class Calc {
	public $a;
	public $b;
	public $result;
	 
	public function DefiningAction($first, $second, $sym) {

		switch($sym){
			case "+":
				$result = self::Sum($first,$second);
				break;
			case "-":
				$result = self::Difference($first,$second);
				break;
			case "*":
				$result = self::Multiplication($first,$second);
				break;
			case "/":
				$result = self::Division($first,$second);
				break;
			case "^":
				$result = self::Pows($first);
				break;
			default: 
				echo "Не выбран симовл";
				break;
		}
		return $result;
	}

	public function Sum($a, $b) {
		return $a + $b;
	}

	public function Difference($a, $b) {
		return $a - $b;
	}

	public function Multiplication($a, $b) {
		return $a * $b;
	}

	public function Division($a, $b) {
		return $a / $b;
	}

	public function Pows($a) {
		return Pow($a,2);
	}
}
?>

//result.php
<?php
require_once("Calc.php");

$a = $_POST["a"];
$b = $_POST["b"];
$sym = $_POST["Symphol"];
$calc = new Calc();

$result = $calc->DefiningAction($a,$b,$sym);

if($sym == "^"){
    $b = $a;
}

echo "$a $sym $b = $result<br>";
echo "<a href = '../index.html'>Вернуться к форме</a>";
?>

//test.php
<?php
    use PHPUnit\Framework\TestCase;
    class CalcTest extends TestCase{
        public function testMulOk(){
            $value1 = [1,2,3,4,5,6,7,8,9,10];
            $value2= [2,2.5,2.9,3];        
            $my = new Calc();
            for($i =0; $i < count($value1);$i++){
                for($k =0; $k < count($value2);$k++){
                    $this->assertSame($value1[$i] * $value2[$k],$my->DefiningAction($value1[$i],$value2[$k],"*"));
                }
            }
        }
        
        public function testSumOk(){
            $value1 = [1,2,3,4,5,6,7,8,9,10];
            $value2= [2,2.5,2.9,3];        
            $my = new Calc();
            for($i =0; $i < count($value1);$i++){
                for($k =0; $k < count($value2);$k++){
                    $this->assertSame($value1[$i] + $value2[$k],$my->DefiningAction($value1[$i],$value2[$k],"+"));
                }
            }
        }
        public function testDivOk(){
            $value1 = [1,2,3,4,5,6,7,8,9,10];
            $value2 = [2,2.5,2.9,3];        
            $my = new Calc();
            for($i =0; $i < count($value1);$i++){
                for($k =0; $k < count($value2);$k++){
                    $this->assertSame($value1[$i] / $value2[$k],$my->DefiningAction($value1[$i],$value2[$k],"/"));
                }
            }
        }
        public function testDifOk(){
            $value1 = [1,2,3,4,5,6,7,8,9,10];
            $value2= [2,2.5,2.9,3];        
            $my = new Calc();
            for($i =0; $i < count($value1);$i++){
                for($k =0; $k < count($value2);$k++){
                    $this->assertSame($value1[$i] - $value2[$k],$my->DefiningAction($value1[$i],$value2[$k],"-"));
                }
            }
        }
        public function testPowOk(){
            $value1 = [1,2,3,4,5,6,7,8,9,10];
            $value2 = 3;        
            $my = new Calc();
            for($i =0; $i < count($value1);$i++){
                $this->assertSame(Pow($value1[$i],2),$my->DefiningAction($value1[$i],$value2,"^"));
            }
        }
    }
?>
