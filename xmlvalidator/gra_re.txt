regExp			::= branch ('|' branch)*										>Regular Expression (branch|branch|...)
branch$			::= piece+														>Branch (piece+)
piece$			::= atom quantifier?											>Piece (atom quantifier?)
quantifier$		::= [?*+] | ( '{' quantity '}' )								>Piece quantifier (? | * | + | {quantity})
quantity$		::= quantRange | quantMin | QuantExact							>Numeric quantity
quantRange$		::= QuantExact ',' QuantExact									>Quantity range {n,m}
quantMin$		::= QuantExact ','												>Minimum quantity {n,}
QuantExact$		::= [0-9]+														>Exact quantity {n}
atom$			::= Char | charClass | ( '(' regExp ')' )						>Atom (char | charclass | (regexp))
Char$			::= [^.\?*+(){}|#x5B#x5D]										>Normal character (any non-metacharacter)
charClass$		::= charClassEsc | WildcardEsc | charClassExpr					>Character class (escape | expression)
charClassExpr$	::= '[' charGroup ']'											>Character class expression ( [charGroup] )
charGroup$		::= charClassSub | negCharGroup | posCharGroup 					>Character group
posCharGroup$	::= ( charRangeBegin | charClassEsc ) ( charRange | charClassEsc )* charRangeEnd?	>Positive character group (character range | character class escape)+
negCharGroup$	::= '^' posCharGroup											>Negative character group
charClassSub$	::= ( posCharGroupND | negCharGroupND ) '-' charClassExpr		>Character class subtraction
posCharGroupND$	::= ( charRangeBegin | charClassEsc ) ( charRange | charClassEsc )* charRangeEndND?	>Positive character group (character range | character class escape)+
negCharGroupND$	::= '^' posCharGroupND											>Negative character group
charRange$		::= seRange | XmlChar											>Character range (XML character|s-e range)
charRangeBegin$	::= seRangeBegin | XmlCharIncDash								>Character range (XML character|s-e range)
charRangeEnd$	::= seRangeEnd | XmlCharIncDash									>Character range (XML character|s-e range)
charRangeEndND$	::= seRangeEnd | XmlChar										>Character range (XML character|s-e range)
seRange$		::= charOrEsc '-' charOrEsc										>s-e character range
seRangeBegin$	::= charOrEscIncDash '-' charOrEsc								>s-e character range
seRangeEnd$		::= charOrEsc '-' charOrEscIncDash								>s-e character range
charOrEsc$		::=	XmlChar | SingleCharEsc										>XML character or single-character escape
charOrEscIncDash$ ::= XmlCharIncDash | SingleCharEsc							>XML character or single-character escape
XmlChar$		::= [^\#x2D#x5B#x5D]											>XML character (all except \-[])
XmlCharIncDash$	::= [^\#x5B#x5D]												>XML character (all except \-[])
charClassEsc	::= ( SingleCharEsc | MultiCharEsc | catEsc | complEsc )		>Character class escape
SingleCharEsc	::= '\' [nrt\|.?*+(){}#x2D#x5B#x5D#x5E]							>Single character escape
catEsc$			::= '\p{' charProp '}'											>Category escape
complEsc$		::= '\P{' charProp '}'											>Category escape compliment
charProp$		::= IsCategory | IsBlock										>Unicode character property
IsCategory$		::= Letters | Marks | Numbers | Punctuation | Separators | Symbols | Other	>Unicode category name
Letters			::= 'L' [ultmo]?												>Unicode letters category
Marks			::= 'M' [nce]?													>Unicode marks category
Numbers			::= 'N' [dlo]?													>Unicode numbers category
Punctuation		::= 'P' [cdseifo]?												>Unicode punctuation category
Separators		::= 'Z' [slp]?													>Unicode separators category
Symbols			::= 'S' [mcko]?													>Unicode symbols category
Other			::= 'C' [cfson]?												>Unicode other category
IsBlock			::= 'Is' [a-zA-Z#x2D]+											>Unicode block name
MultiCharEsc	::= '\' [sSiIcCdDwW]											>Multi-character escape
WildcardEsc$	::= '.'															>Wildcard escape (.)
